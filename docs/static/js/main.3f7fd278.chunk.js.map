{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","reps","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8LAIMA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAmBrC,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAExBR,EAAcE,GACdC,EAAc,OAOd,2BACIM,KAAK,OACLC,MAAOR,EACPS,SApBe,SAACN,GACxBF,EAAcE,EAAEO,OAAOF,Y,uBCOfG,EAhBH,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAENC,EAFM,0FAEmFC,UAAUH,GAF7F,sBAGOI,MAAMF,GAHb,cAGNG,EAHM,gBAISA,EAAKC,OAJd,uBAILC,EAJK,EAILA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT9B,kBAaLM,GAbK,4CAAH,sDCUEO,EARK,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IACxB,OACI,yBAAKc,UAAY,QACb,yBAAKC,IAAKf,EAAKgB,IAAKN,MCyBjBO,EAzBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEFa,ECHK,SAACb,GAAc,IAAD,EACLb,mBAAS,CAC/BoB,KAAK,GACLa,SAAQ,IAHmB,mBACxBC,EADwB,KACjBC,EADiB,KAgB/B,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGrB,CAACpB,IAEGqB,EDbeK,CAAa1B,GAA5BO,KAEP,OACI,oCACI,4BAAKP,GACJ,yBAAKgB,UAAY,aAEVH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,UEYjBkB,EAzBK,WAAK,MAGczC,mBAAS,CAAC,cAHxB,mBAGf0C,EAHe,KAGH3C,EAHG,KAKtB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ2C,EAAWpB,KAAI,SAAAT,GACf,OAAO,kBAAC,EAAD,CACK2B,IAAO3B,EACPA,SAAYA,U,MCb5C8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.3f7fd278.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handlgeInputChange = (e) =>{\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if(inputValue.trim().length>2){\n            //setCategories(categories => [inputValue, ...categories]) // incremental\n            setCategories(inputValue) //replace\n            setInputValue('')\n        }\n\n    }\n\n    return (\n        <form onSubmit = {handleSubmit}>\n            <input\n                type='text'\n                value={inputValue}\n                onChange = {handlgeInputChange}\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport {AddCategory}","const getGifs = async( category) => {\n    ///api.giphy.com/v1/gifs/search\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=t1u6zhsZEpFSfiSzx3EoxtryNUej1oCs&q=${encodeURI(category)}&limit=10`\n    const reps = await fetch(url)\n    const {data} = await reps.json()\n    const gifs = data.map(img =>{\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs\n}\n\nexport default  getGifs","import React from 'react'\n\nconst GifGridItem = ({title,url}) => {\n    return (\n        <div className = 'card'>\n            <img src={url} alt={title}/>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nconst GifGrid = ({category}) => {\n\n    const {data:images} = useFetchGifs(category)\n\n    return (\n        <>\n            <h3>{category}</h3>\n           { <div className = 'card-grid'>\n                {\n                    images.map( img  =>(\n                        <GifGridItem\n                            key= {img.id}\n                            { ...img }\n                        />\n                    ))\n                }\n            </div>}\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport getGifs from \"../helpers/getGifs\"\n\n\nconst useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    })\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data:imgs,\n                    loading:false\n                })\n            })\n    }, [category])\n\n    return state\n}\n\nexport {useFetchGifs}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () =>{\n\n    //const categories = ['One Punch', 'Samurai X','Dragon Ball']\n    const [categories, setCategories] = useState(['One Punch'])\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map(category =>{\n                    return <GifGrid\n                                key = {category}\n                                category = {category}\n                            />\n                    })\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default  GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}