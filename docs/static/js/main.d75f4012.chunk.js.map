{"version":3,"sources":["components/AddCategory.js","data/data.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","config","getGifs","category","a","url","encodeURI","fetch","reps","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","gifsPerPage","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"8LAGMA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAkBzC,OACE,0BAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAGEJ,EAAWK,OAAS,IAEtBP,GAAc,SAACQ,GAAD,MAAgB,CAACN,MAC/BC,EAAc,OAMd,2BAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAjBf,SAACN,GAC1BF,EAAcE,EAAEO,OAAOF,Y,uBCPvBG,EAEK,GCAHC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAERC,EAFQ,0FAEiFC,UAC7FH,GAHY,kBAIHF,GAJG,SAKKM,MAAMF,GALX,cAKRG,EALQ,gBAMSA,EAAKC,OANd,uBAMNC,EANM,EAMNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAePM,GAfO,4CAAH,sDCcEO,EAbK,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IACxB,OACI,yBAAKc,UAAY,QACb,yBAAKC,IAAKf,EAAKgB,IAAKN,MCsBjBO,EAvBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACHa,ECHK,SAACb,EAAUoB,GAAiB,IAAD,EACpBlC,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAHmC,mBACvCC,EADuC,KAChCC,EADgC,KAe9C,OATAC,qBAAU,WACRzB,EAAQC,EAAUoB,GAAaK,MAAK,SAACC,GACnCH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGZ,CAACrB,EAAUoB,IAEPE,EDZkBK,CAAa3B,GAA9BO,KAER,OACE,oCACE,4BAAKP,GAEH,yBAAKgB,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,QAIpC,6BACA,0CEMSmB,EArBM,SAAC,GAAyC,IAAD,IAAtCC,yBAAsC,MAAlB,CAAC,WAAiB,IAIxB5C,mBAAS4C,GAJe,mBAIrDrC,EAJqD,KAIzCR,EAJyC,KAM5D,OACE,oCACE,+DACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACGQ,EAAWgB,KAAI,SAACT,GACf,OAAO,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,U,MCXnD+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.d75f4012.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handlgeInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    //if (inputValue.trim().length > 2) {\n    if (inputValue.length > 0) {\n      //   setCategories((categories) => [inputValue, ...categories]); // incremental\n      setCategories((categories) => [inputValue]); // replace\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handlgeInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport { AddCategory };\n","var config = {\n  //GIPHY PARAMETERS\n  limit: 20,\n  offset: 0,\n  rating: \"g\",\n};\n\nexport { config };\n","import { config } from \"../data/data\";\n\nconst getGifs = async (category) => {\n  ///api.giphy.com/v1/gifs/search\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=t1u6zhsZEpFSfiSzx3EoxtryNUej1oCs&q=${encodeURI(\n    category\n  )}&limit=${config.limit}`;\n  const reps = await fetch(url);\n  const { data } = await reps.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n\nexport { getGifs };\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst GifGridItem = ({title,url}) => {\n    return (\n        <div className = 'card'>\n            <img src={url} alt={title}/>\n        </div>\n    )\n}\n\nGifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}\n\nexport default GifGridItem\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {\n        <div className=\"card-grid\">\n          {images.map((img) => (\n            <GifGridItem key={img.id} {...img} />\n          ))}\n        </div>\n      }\n      <br />\n      <button>Next</button>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nconst useFetchGifs = (category, gifsPerPage) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category, gifsPerPage).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category, gifsPerPage]);\n\n  return state;\n};\n\nexport { useFetchGifs };\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = ({ defaultCategories = [\"useless\"] }) => {\n  //const categories = ['One Punch', 'Samurai X','Dragon Ball']\n  //const [categories, setCategories] = useState(['One Punch'])\n\n  const [categories, setCategories] = useState(defaultCategories);\n\n  return (\n    <>\n      <h2>Gif Finder No One Will Ever Use</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => {\n          return <GifGrid key={category} category={category} />;\n        })}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}